#!groovy
@Library('jenkinsLib') _
currentBuild.displayName = "#${env.BUILD_NUMBER}-${branch_name}"

pipeline {
    agent { node { label 'build-slave' } }
    environment {
        org = "ccctechcenter"
        service = "superset"
        namespace = "superset"
        channel = "#sss-nextgen"
        stack = "superglue"
    }
    parameters {
        choice(
            choices: '\nci\nqa\npilot\nprod',
            description: 'override the target environment for deployment',
            name: 'env_override')
        booleanParam(
            name: 'deploy_dashboard',
            defaultValue: true,
            description: 'Deploy dashboards'
        )
        string(
            defaultValue: '',
            description: 'override the the image tag used for this release. If set, no build will occur and the image will just be pulled from the registry',
            name: 'tag_override'
        )
        booleanParam(
            name: 'run_tests',
            defaultValue: true,
            description: 'Run the cypress tests'
        )
    }
    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '60', artifactNumToKeepStr: '10', daysToKeepStr: '60', numToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage('init') {
            steps {
                script {
                    env.environment = params.environment
                    env.deploy_mode = params.deploy_mode
                    ceEnv.setSSMCreds("${environment}")
                    KEYCLOAK_CLIENT_SECRET = ceEnv.getSSMParameter("/${env.environment}/keycloak/superset-client/secret")
                    env.CYPRESS_BASE_URL = "http://localhost:8088/"
                    env.api_login = "apiuser"
                    env.api_password = ceEnv.getSSMParameter("/${env.environment}/superset/apiuser/password")
                    ceEnv.unsetSSMCreds()     
                    env.tag = "N/A" //image tag for apache/superset is defined in values.yaml
                    echo "user is $api_login "
                }
            }
        }
      stage('build') {
            steps {
                nodejs('Node14.16.1') {
                    sh label: "Add npm packages", script: "npm i"
                }
            }
        }
        
        stage('Deploy superset dashboard'){
            when {
            expression{ env.deploy_mode == "deploy_dashboard" }
            }
            steps {
            sh "python supersets.py --base_url ${env.CYPRESS_BASE_URL} --login ${env.api_login} --password ${env.api_password}"
            }
        }
        stage('post-deploy testing') {
            when { expression { env.deploy_mode =="deploy_service" } }
            steps {
                nodejs('Node14.16.1') {
                    sh label: 'all tests', returnStatus: true, script: "yarn cy:run"
                }
                junit allowEmptyResults: true, testResults: 'results/*.xml'
                archiveArtifacts allowEmptyArchive: true, artifacts: '**/*.mp3', followSymlinks: false
            }
        }
    }
    post {
        success {
            script {
                ceDeploy.slackNotify(channel, "good", "Success", env.service, environment, env.url, env.tag)
            }
        }
        
    }
}
